// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package authmodel

import (
	"fmt"
	"io"
	"strconv"
)

type AuthenticationInfo struct {
	Token    string `json:"token"`
	Name     string `json:"name"`
	UserType string `json:"userType"`
}

type Mutation struct {
}

type Query struct {
}

type User struct {
	ID       string   `json:"id"`
	Name     string   `json:"name"`
	Phone    *string  `json:"phone,omitempty"`
	UserType UserType `json:"userType"`
	Password string   `json:"password"`
}

type UserType string

const (
	UserTypeGuest    UserType = "Guest"
	UserTypeEmployee UserType = "Employee"
)

var AllUserType = []UserType{
	UserTypeGuest,
	UserTypeEmployee,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeGuest, UserTypeEmployee:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
