// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package resemodel

import (
	"fmt"
	"go-server/common"
	"io"
	"strconv"
)

type Mutation struct {
}

type Query struct {
}

type Reservation struct {
	ID          string            `json:"id"`
	GuestName   string            `json:"guestName"`
	GuestPhone  string            `json:"guestPhone"`
	ArrivalTime common.Date       `json:"arrivalTime"`
	TableSize   int               `json:"tableSize"`
	Status      ReservationStatus `json:"status"`
}

type ReservationCreateInput struct {
	GuestName   string      `json:"guestName"`
	GuestPhone  string      `json:"guestPhone"`
	ArrivalTime common.Date `json:"arrivalTime"`
	TableSize   int         `json:"tableSize"`
}

type ReservationUpdateInput struct {
	ID          string            `json:"id"`
	GuestName   string            `json:"guestName"`
	GuestPhone  string            `json:"guestPhone"`
	ArrivalTime common.Date       `json:"arrivalTime"`
	TableSize   int               `json:"tableSize"`
	Status      ReservationStatus `json:"status"`
}

type ReservationStatus string

const (
	ReservationStatusCreated   ReservationStatus = "Created"
	ReservationStatusCompleted ReservationStatus = "Completed"
	ReservationStatusCanceled  ReservationStatus = "Canceled"
)

var AllReservationStatus = []ReservationStatus{
	ReservationStatusCreated,
	ReservationStatusCompleted,
	ReservationStatusCanceled,
}

func (e ReservationStatus) IsValid() bool {
	switch e {
	case ReservationStatusCreated, ReservationStatusCompleted, ReservationStatusCanceled:
		return true
	}
	return false
}

func (e ReservationStatus) String() string {
	return string(e)
}

func (e *ReservationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReservationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReservationStatus", str)
	}
	return nil
}

func (e ReservationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
